/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/x893675/demo-crd/apis/apps/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigDeploymentLister helps list ConfigDeployments.
// All objects returned here must be treated as read-only.
type ConfigDeploymentLister interface {
	// List lists all ConfigDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ConfigDeployment, err error)
	// ConfigDeployments returns an object that can list and get ConfigDeployments.
	ConfigDeployments(namespace string) ConfigDeploymentNamespaceLister
	ConfigDeploymentListerExpansion
}

// configDeploymentLister implements the ConfigDeploymentLister interface.
type configDeploymentLister struct {
	indexer cache.Indexer
}

// NewConfigDeploymentLister returns a new ConfigDeploymentLister.
func NewConfigDeploymentLister(indexer cache.Indexer) ConfigDeploymentLister {
	return &configDeploymentLister{indexer: indexer}
}

// List lists all ConfigDeployments in the indexer.
func (s *configDeploymentLister) List(selector labels.Selector) (ret []*v1.ConfigDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ConfigDeployment))
	})
	return ret, err
}

// ConfigDeployments returns an object that can list and get ConfigDeployments.
func (s *configDeploymentLister) ConfigDeployments(namespace string) ConfigDeploymentNamespaceLister {
	return configDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigDeploymentNamespaceLister helps list and get ConfigDeployments.
// All objects returned here must be treated as read-only.
type ConfigDeploymentNamespaceLister interface {
	// List lists all ConfigDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ConfigDeployment, err error)
	// Get retrieves the ConfigDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ConfigDeployment, error)
	ConfigDeploymentNamespaceListerExpansion
}

// configDeploymentNamespaceLister implements the ConfigDeploymentNamespaceLister
// interface.
type configDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigDeployments in the indexer for a given namespace.
func (s configDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1.ConfigDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ConfigDeployment))
	})
	return ret, err
}

// Get retrieves the ConfigDeployment from the indexer for a given namespace and name.
func (s configDeploymentNamespaceLister) Get(name string) (*v1.ConfigDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("configdeployment"), name)
	}
	return obj.(*v1.ConfigDeployment), nil
}
